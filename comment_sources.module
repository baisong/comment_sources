<?php

/**
 * @file
 * Code for comment_sources module.
 */

/**
 * Includes non-hook functions and helper functions.
 */
ctools_include('api', 'comment_sources');

/**
 * Includes comment_sources hook implementations for Drupal, Facebook, Disqus.
 */
ctools_include('sources', 'comment_sources');

/**
 * Implements hook_menu().
 */
function comment_sources_menu() {
  $items = array();
  $items['admin/config/services/comment_sources'] = array(
    'title' => 'Comment Sources',
    'description' => 'Select commenting system(s) to use',
    'access arguments' => array('administer comments and comment settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('comment_sources_admin_settings_form'),
    'file' => 'comment_sources.admin.inc',
  );
  $items['comment_sources/record_comment'] = array(
    'title' => 'Record new comment',
    'description' => 'Record creation of a new comment by a third-party commenting source',
    'access arguments' => array('access content'),
    'page callback' => 'comment_sources_record_comment_ajax',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter() for node_type_form.
 */
function comment_sources_form_node_type_form_alter(&$form, $form_state, $form_id) {
  // Modifies the node type edit form if type is set and comments enabled.
  if (!isset($form['#node_type']) || !isset($form['comment'])) {
    return;
  }

  $default_source = comment_sources_get_source($form['#node_type']->type);
  if (empty($default_source)) {
    $default_source = 'comment';
  }

  // Overrides the standard comment javascript with our improved version that
  // also handles comment sources.
  $form['comment']['#attached'] = array(
    'js' => array(drupal_get_path('module', 'comment_sources') . '/comment_sources-node-form.js'),
  );

  // Only display the default comment option controls if using Drupal comments.
  foreach ($form['comment'] as & $form_element) {
    if (is_array($form_element) && isset($form_element['#type'])) {
      $form_element['#states'] = array(
        'visible' => array(
          ':input[name="comment_source"]' => array('value' => 'comment'),
        ),
      );
    }
  }

  // Adds comment source options to form.
  $form['comment']['comment_source'] = array(
    '#type' => 'select',
    '#title' => t('Comment source'),
    '#default_value' => $default_source,
    '#options' => _comment_sources_form_options(),
    '#weight' => -20,
  );

  // @todo Test the case where this is an array.
  // Need to find another module that hooks into the submit form.
  if (isset($form['actions']['submit']['#submit']) && is_array($form['actions']['submit']['#submit'])) {
    $form['actions']['submit']['#submit'][] = '_comment_sources_node_type_form_submit';
  }
  else {
    $form['actions']['submit']['#submit'] = array('_comment_sources_node_type_form_submit', 'node_type_form_submit');
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form.
 */
function comment_sources_form_node_form_alter(&$form, $form_state, $form_id) {
  // Hides settings for inappropriate comment types
  $node = $form['#node'];

  $source = comment_sources_get_source($node);
  // Removes the preset name from fb_social sources
  $source = preg_replace('/:.*$/', '', $source);
  //$form['comment_sources_source'] = $source;

  $status = comment_sources_get_status($node);

  // Only displays one comment settings form on the node.
  switch ($source) {
    case 'comment':
      unset($form['comment_settings']['disqus_status']);
      unset($form['comment_settings']['fb_social_status']);
      // Hides the default comment radio form element.
      $form['comment_settings']['comment']['#type'] = 'value';
      // Provides a checkbox to match other comment sources.
      $form['comment_settings']['comment_status'] = array(
        '#type' => 'checkbox',
        '#default_value' => $status,
        '#title' => t('Drupal comments'),
      );
      break;

    case '':
      unset($form['comment_settings']['disqus_status']);
      unset($form['comment_settings']['fb_social_status']);
      unset($form['comment_settings']['comment']);
      $form['comment_settings']['no_comment'] = array(
        '#type' => 'checkbox',
        '#title' => t('No comments'),
        '#default_value' => 1,
        '#disabled' => TRUE,
      );
      break;

    case 'disqus':
      // Don't hide Drupal comment options if there are pre-existing comments.
      // Note if the comments status is 'Hidden',
      // comment_count will always be zero
      if (!isset($node->comment_count) || ($node->comment_count == 0)) {
        unset($form['comment_settings']['comment']);
      }
      unset($form['comment_settings']['fb_social_status']);
      $form['comment_settings']['#access'] = user_access('toggle disqus comments');
      break;

    case 'fb_social':
      // See comment above re: disqus
      if (!isset($node->comment_count) || ($node->comment_count == 0)) {
        unset($form['comment_settings']['comment']);
      }
      unset($form['comment_settings']['disqus_status']);

      // Add node-specific Facebook comment settings, since they the aren't done
      // in the fb_social module
      if (!isset($form['comment_settings'])) {
        $form['comment_settings'] = array(
          '#type' => 'fieldset',
          '#title' => t('Comment settings'),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#group' => 'additional_settings',
          '#weight' => 30,
        );
      }
      else {
        if (isset($form['comment_settings']['comment'])) {
          $form['comment_settings']['comment']['#access'] = $form['comment_settings']['#access'];
          $form['comment_settings']['#access'] = TRUE;
        }
      }

      $form['comment_settings']['fb_social_status'] = array(
        '#type' => 'checkbox',
        '#title' => t('Facebook comments'),
        '#description' => t('Users can post comments using Facebook.'),
        '#default_value' => ($status !== FALSE) ? $status : TRUE,
      );
      break;
  }

  $form['#submit'][] = '_comment_sources_node_form_submit';

  // Overrides the standard comment javascript with our improved version that
  // also handles comment sources.
  if (isset($form['comment_settings'])) {
    $form['comment_settings']['#attached'] = array(
      'js' => array(drupal_get_path('module', 'comment_sources') . '/comment_sources-node-form.js'),
    );
  }
}

/**
 * Saves the comment source setting for a content type
 */
function _comment_sources_node_form_submit(&$form, $form_state) {
  $node = $form['node'];
  $source = isset($form['comment_sources_source']) ? $form['comment_sources_source'] : FALSE;
  $data = _comment_sources_get_node_data($form_state, $source);
  comment_sources_record_node_settings($node, $data['source'], $data['status']);
}

/**
 * Prepares the comment source and status for this node form.
 *
 * @todo find correct element paths.
 */
function _comment_sources_get_node_data($form_state, $source) {
  $data = array();

  $values = $form_state['values'];
  if ($source == 'comment' || isset($form_state['values']['comment_status'])) {
    $source = 'comment';
    $status = $form_state['values']['comment_status'];
  }
  else if ($source == 'disqus' || isset($form_state['values']['disqus_status'])) {
    $source = 'disqus';
    $status = $form_state['values']['disqus_status'];
  }
  else if ($source == 'fb_social' || isset($form_state['values']['fb_social_status'])) {
    $source = 'fb_social';
    $status = $form_state['values']['fb_social_status'];
  }
  else {
    $source = '';
    $status = 0;
  }
  $data['source'] = $source;
  $data['status'] = $status;

  return $data;
}

/**
 * Saves the comment source setting for a content type
 */
function _comment_sources_node_type_form_submit(&$form, $form_state) {
  // Ensures we have a nodetype to update settings for.
  if (!isset($form['#node_type']->type)) {
    return;
  }

  // Prepares params for nodetype source setting.
  $type   = $form['#node_type']->type;
  $source = $form['comment']['comment_source']['#value'];
  if (module_exists('vsite')) {
    $vsite = vsite_get_vsite();
  }
  else {
    $vsite = FALSE;
  }
  comment_sources_set_type_source($source, $type, $vsite);
}

/**
 * Implements hook_node_view().
 */
function comment_sources_node_view($node, $view_mode) {
  // Adds javascript for recording comments made in a third-party system
  $source = comment_sources_get_source($node);
  if (!in_array($source, array('comment', ''))) {
    drupal_add_js(array('comment_sources' => array('nid' => $node->nid)), 'setting');
    drupal_add_js(drupal_get_path('module', 'comment_sources') . '/comment_sources.js');
  }
}

/**
 * Implements hook_node_load().
 *
 * For Disqus nodes, checks to see if the comments should be displayed.
 *
 * @todo add @see (where is this used?)
 */
function comment_sources_node_load($nodes, $types) {
  foreach ($nodes as & $node) {
    if (isset($node->disqus)) {
      $node->disqus['status'] = comment_sources_should_display_comments($node, 'disqus');
    }
  }
}

/**
 * Implements hook_fb_social_event_subscribe().
 */
function comment_sources_fb_social_event_subscribe() {
  // Integrates with google analytics.
  return array(
    'FB.Event.subscribe("comment.create", function(response) {',
    'fb_social_track_comments(response);',
    '});',
  );
}

/**
 * Implements hook_node_delete().
 */
function comment_sources_node_delete($node) {
  // Deletes any existing comment sources info for this node.
  db_delete('comment_sources_comments')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_views_api().
 */
function comment_sources_views_api() {
  return array(
    'api' => 3.0,
  );
}

