<?php

module_load_include('api.php','comment_sources');

/**
 * Implements hook_menu().
 */
function comment_sources_menu() {
  $items = array();
  $items['admin/structure/comment_sources'] = array(
    'title' => 'Comment Sources',
    'description' => 'Select commenting system(s) to use',
    'access arguments' => array('Administer comments and comment settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('comment_sources_admin_settings_form'),
    'file' => 'comment_sources.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function comment_sources_form_alter(&$form, $form_state, $form_id) {

  // Node type edit page
  if ($form_id == 'node_type_form' && isset($form['#node_type'])) {
    if (isset($form['comment'])) {
      $default_source = comment_sources_get_source($form['#node_type']->type);

      foreach ($form['comment'] as &$form_element) {
        debug($form['comment']);
        if (is_array($form_element)) {
          $form_element['#states'] = array(
            'hidden' => array(
              'input[name="comment_source"]' => array('value' => 'comment')
            )
          );
        }
      }

      $form['comment']['comment_source'] = array(
        '#type' => 'select',
        '#title' => t('Comment source'),
        '#default_value' => !empty($default_source) ? $default_source : 'comment',
        '#options' => comment_sources_node_options(comment_sources_enabled_sources()),
        '#weight' => -20,
      );

    }

  }


// Allow toggling the comments on or off per node from the node edit form.
//  if (!empty($form['#node_edit_form'])) {
//    $node = $form['#node'];
//    // Only display the toggle Disqus comments setting if comments are available
//    // for the given node type.
//    $types = variable_get('disqus_nodetypes', array());
//    if (isset($types[$node->type]) && !empty($types[$node->type])) {
//      // Add the Disqus settings into the Comment settings fieldset if it exists.
//      if (!isset($form['comment_settings'])) {
//        $form['comment_settings'] = array(
//          '#type' => 'fieldset',
//          '#access' => user_access('toggle disqus comments'),
//          '#title' => t('Comment settings'),
//          '#collapsible' => TRUE,
//          '#collapsed' => TRUE,
//          '#group' => 'additional_settings',
//          '#weight' => 30,
//        );
//      }
//      else {
//        if (isset($form['comment_settings']['comment'])) {
//          $form['comment_settings']['comment']['#access'] = $form['comment_settings']['#access'];
//          $form['comment_settings']['#access'] = true;
//        }
//      }
//      $form['comment_settings']['disqus_status'] = array(
//        '#type' => 'checkbox',
//        '#title' => t('Disqus comments'),
//        '#description' => t('Users can post comments using <a href="@disqus">Disqus</a>.', array('@disqus' => 'http://disqus.com')),
//        '#default_value' => isset($node->disqus['status']) ? $node->disqus['status'] : TRUE,
//        '#access' => user_access('toggle disqus comments'),
//      );
//    }
//  }
}

/**
 * Get the list of comment source options that can be used in a form element
 */
function comment_sources_node_options($sources)
{
  foreach ($sources as $key => $value) {
    $node_options[$key] = $value['description'];
  }
  return $node_options;
}



/**
 * Get Facebook Social comment presets
 */
function _comment_sources_preset_fb_social() {
  $presets = array();
  if (function_exists('fb_social_get_presets_by_type')) {
    $presets = fb_social_get_presets_by_type('comments');
  }
  return $presets;
}


/**
 * Load the existing comment source selections and return as an associative array of comment sources keyed by node type
 * Where there are multiple comment sources provided by the same module, the source names will be of the form
 * 'module_name:source_name'
 */
function comment_sources_load($sources) {
  $default_values = array();
  foreach (array_keys($sources) as $key) {
    preg_match('/:(.*$)/',$key,$matches);
    $function_name = "_comment_sources_load_" . preg_replace('/:.*$/','',$key);
    if (function_exists($function_name)) {
      $params = array();
      if (count($matches) > 1)
        $params[] = $matches[1];
      $node_type_names = call_user_func_array($function_name,$params);
      foreach ($node_type_names as $node_type_name) {
        $default_values[$node_type_name] = $key;
      }
    }
  }
  /* Make sure that node types with no comment sources get a value in the array */
  foreach (node_type_get_types() as $node_type) {
    if (!array_key_exists($node_type->type,$default_values)) {
      $default_values[$node_type->type] = '';
    }

  }
  return $default_values;
}

/**
 * Retrieve the Disqus node types comment settings as an array of node types using Disqus comments
 */
function _comment_sources_load_disqus() {
  return variable_get('disqus_nodetypes', array());
}

/**
 * Retrieve the Facebook preset node types comment settings as an array of node types using Facebook comments
 */
function _comment_sources_load_fb_social($variant = '') {
  $result = array();
  if ($variant && function_exists('fb_social_preset_load')) {
    $preset = fb_social_preset_load($variant);
    $result = $preset->settings['node_types']['types'];
  }
  return $result;
}

/**
 * Retrieve the Drupal node types comment settings as an array of node types using Drupal core comments
 */
function _comment_sources_load_comment() {
  $node_types = node_type_get_types();
  $result = array();
  foreach ($node_types as $node_type) {
    $setting = variable_get("comment_" . $node_type->type, COMMENT_NODE_CLOSED);
    if ($setting == COMMENT_NODE_OPEN) {
      $result[$node_type->type] = $node_type->type;
    }
  }
  return $result;
}

/**
 * Save the comment source selections by node type, given a list of available comment sources and
 * an associative array of the new comment sources, keyed by node type
 */
function comment_sources_save($available_sources, $selected_sources) {

  $selections = array();
  foreach ($selected_sources as $key => $value) {
    $selections[$value][$key] = $key;
  }

  foreach ($available_sources as $key => $value) {
    preg_match('/:(.*$)/',$key,$matches);
    $function_name = "_comment_sources_save_" . preg_replace('/:.*$/','',$key);
    if (function_exists($function_name)) {
      $params = array(isset($selections[$key]) ? $selections[$key] : array());
      if (count($matches) > 1) { // If we need to add a preset
        $params[] = $matches[1];
      }
      call_user_func_array($function_name,$params);
    }
  }
}

/**
 * Save the Disqus node types comment settings
 */
function _comment_sources_save_disqus($comment_node_types) {
  variable_set('disqus_nodetypes', $comment_node_types);
}

/**
 * Save the Facebook node type comments settings
 */
function _comment_sources_save_fb_social($comment_node_types, $preset_name = '') {
  if ($preset_name && function_exists('fb_social_preset_load')) {
    $preset = fb_social_preset_load($preset_name);
    $preset->settings['node_types']['types'] = $comment_node_types;
    ctools_export_crud_save($preset->table, $preset);
  }
}

/**
 * Save the Drupal comments node types comment settings
 * Note: We do not have an option to set the default comment to be 'hidden'
 */
function _comment_sources_save_comment($comment_node_types) {
  $node_types = node_type_get_types();
  foreach ($node_types as $node_type) {
    variable_set(
      "comment_" . $node_type->type,
      isset($comment_node_types[$node_type->type]) ? COMMENT_NODE_OPEN : COMMENT_NODE_CLOSED
    );
  }
}

