diff --git fb_social.module fb_social.module
index 8dd395a..694ea74 100644
--- fb_social.module
+++ fb_social.module
@@ -207,6 +207,75 @@ function fb_social_link($type, $object = NULL, $view_mode = 'full') {
   }
 }
 
+/**
+ * Implements hook_permission().
+ */
+function fb_social_permission() {
+  $permissions = array();
+  if ($presets = fb_social_get_presets()) {
+   foreach ( $presets as $preset ) {
+      $plugin = fb_social_fb_plugin_load($preset->plugin_type);
+      $function = ctools_plugin_get_function($plugin, 'hook_permission');
+      if ($function) {
+        $permissions += $function($preset);
+      }
+    }
+  }
+  if (isset($permissions)) {
+    return $permissions;
+  }
+}
+
+/**
+ * Implements hook_form_alter().
+ */
+function fb_social_form_alter(&$form, $form_state, $form_id) {
+  if ($presets = fb_social_get_presets()) {
+   foreach ( $presets as $preset ) {
+      $plugin = fb_social_fb_plugin_load($preset->plugin_type);
+      $function = ctools_plugin_get_function($plugin, 'hook_form_alter');
+      if ($function) {
+        $function($preset, &$form, $form_state, $form_id);
+      }
+    }
+  }
+}
+
+/**
+ * Helper function for implementation of hook_node_update, hook_node_insert, hook_node_delete
+ */
+function _fb_social_node_hook($hook_name, $node) {
+  if ($presets = fb_social_get_presets()) {
+    foreach ( $presets as $preset ) {
+      $plugin = fb_social_fb_plugin_load($preset->plugin_type);
+      $function = ctools_plugin_get_function($plugin, $hook_name);
+      if ($function) {
+        $function($preset, $node);
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_node_update().
+ */
+function fb_social_node_update($node) {
+  _fb_social_node_hook('hook_node_update', $node);
+}
+
+/**
+ * Implements hook_node_delete().
+ */
+function fb_social_node_delete($node) {
+  _fb_social_node_hook('hook_node_delete', $node);
+}
+
+/**
+ * Implements hook_node_insert().
+ */
+function fb_social_node_insert($node) {
+  _fb_social_node_hook('hook_node_insert', $node);
+}
 
 // ctools hooks / api
   
diff --git plugins/fb_plugin/comments.inc plugins/fb_plugin/comments.inc
index 4db67fa..ee65b11 100644
--- plugins/fb_plugin/comments.inc
+++ plugins/fb_plugin/comments.inc
@@ -12,10 +12,15 @@ $plugin = array(
     'html tag name' => 'comments', 
     
     // hooks 
-    'hook_nodeapi_view' => '_fb_social_comments_nodeapi_view', 
-    'hook_field_extra_fields' => '_fb_social_comments_field_extra_fields', 
+    'hook_permission' => '_fb_social_comments_permission',
+    'hook_nodeapi_view' => '_fb_social_comments_nodeapi_view',
+    'hook_node_update' => '_fb_social_comments_node_update',
+    'hook_node_insert' => '_fb_social_comments_node_insert',
+    'hook_node_delete' => '_fb_social_comments_node_delete',
+    'hook_form_alter' => '_fb_social_comments_form_alter',
+    'hook_field_extra_fields' => '_fb_social_comments_field_extra_fields',
     'hook_preprocess_fb_social_plugin' => '_fb_social_comments_preprocess_fb_social_plugin',
-    'hook_link' => '_fb_social_comments_link', 
+    'hook_link' => '_fb_social_comments_link',
 );
 
 function comments_defaults() {
@@ -184,7 +189,7 @@ function _fb_social_comments_preprocess_fb_social_plugin(&$variables) {
  * nodeapi_view callback for this plugin
  */
 function _fb_social_comments_nodeapi_view($preset, &$node, $view_mode = 'full') {
-  
+
   // dont disply plugin for unpublished nodes
   if (! ($node->status)) {
     return;
@@ -199,7 +204,20 @@ function _fb_social_comments_nodeapi_view($preset, &$node, $view_mode = 'full')
   if (empty($preset->settings['plugin_location']['node_view_modes'][$view_mode])) {
     return;
   }
-  
+
+  // Existing Drupal comments are present, so don't display Facebook comments
+  if (($node->comment_count > 0) && ($node->comment != COMMENT_NODE_HIDDEN)) {
+    return;
+  }
+
+  // it's not supposed to be displayed for this node
+  if (module_exists('comment_sources')) {
+    $status = db_query("SELECT status FROM {comment_sources_enabled_comments} WHERE nid = :nid", array(':nid' => $node->nid))->fetchObject();
+    if (isset($status->status) && !(bool)$status->status) {
+      return;
+    }
+  }
+
   $preset->fb_attrs['href'] = fb_social_url('node/' . $node->nid);
   $output = fb_social_preset_view($preset);
   $node->content['fb_social_' . $preset->name] = array(
@@ -319,5 +337,95 @@ function fb_social_comments_seo_comment_view($comment) {
   return $comment -> message . ' - by ' . $comment -> from -> name . ' on ' . format_date(strtotime($comment -> created_time));
 }
 
+/**
+ * Implements hook_permission().
+ */
+function _fb_social_comments_permission() {
+  return array(
+    'toggle facebook comments' => array(
+      'title' => t('Toggle Facebook comments for a post'),
+      'description' => t('Toggle display of Facebook comments for an individual post'),
+    ),
+  );
+}
+
+/**
+ * hook_form_alter callback for this plugin
+ */
+function _fb_social_comments_form_alter($preset, &$form, $form_state, $form_id) {
+  if (module_exists('comment_sources')) {
+    if (!empty($form['#node_edit_form'])) {
+      $node_types = $preset->settings['node_types']['types'];
+      $node = $form['#node'];
+      if (array_key_exists($node->type, $node_types)) {
+        if (!isset($form['comment_settings'])) {
+          $form['comment_settings'] = array(
+            '#type' => 'fieldset',
+            '#access' => user_access('toggle facebook comments'),
+            '#title' => t('Comment settings'),
+            '#collapsible' => TRUE,
+            '#collapsed' => TRUE,
+            '#group' => 'additional_settings',
+            '#weight' => 30,
+          );
+        }
+        else {
+          if (isset($form['comment_settings']['comment'])) {
+            $form['comment_settings']['comment']['#access'] = $form['comment_settings']['#access'];
+            $form['comment_settings']['#access'] = TRUE;
+          }
+        }
+
+        if (isset($node->nid)) {
+          $status = db_query("SELECT status FROM {comment_sources_enabled_comments} WHERE nid = :nid", array(':nid' => $node->nid))->fetchObject();
+        }
+
+        $form['comment_settings']['fb_social_status'] = array(
+          '#type' => 'checkbox',
+          '#title' => t('Facebook comments'),
+          '#description' => t('Users can post comments using Facebook.'),
+          '#default_value' => isset($status->status) ? $status->status : TRUE,
+          '#access' => user_access('toggle facebook comments'),
+        );
+      }
+    }
+  }
+}
+
+/**
+ * Implements hook_node_delete().
+ */
+function _fb_social_comments_node_delete($preset, $node) {
+  if (module_exists('comment_sources')) {
+    db_delete('comment_sources_enabled_comments')->condition('nid', $node->nid)->execute();
+  }
+}
+
+/**
+ * Implements hook_node_insert().
+ */
+function _fb_social_comments_node_insert($preset, $node) {
+  if (module_exists('comment_sources')) {
+    // Clear the value from the database.
+    _fb_social_comments_node_delete($preset, $node);
+
+    // Write the value only if it's disabled (default is enabled).
+    if (isset($node->fb_social_status) && $node->fb_social_status == FALSE) {
+      $data = array(
+        'nid' => $node->nid,
+        'status' => $node->fb_social_status,
+      );
+      drupal_write_record('comment_sources_enabled_comments', $data);
+    }
+  }
+}
+
+/**
+ * Implements hook_node_update().
+ */
+function _fb_social_comments_node_update($preset, $node) {
+  // Update is the same as insert.
+  _fb_social_comments_node_insert($preset, $node);
+}
 
 
